{"version":3,"sources":["Header/Header.js","AddTask/AddTask.js","TaskCount/TaskCount.js","Task/Task.js","App.js","index.js"],"names":["Header","AddTask","props","useState","taskText","setTaskText","moment","format","date","setDate","className","type","id","placeholder","value","onChange","event","target","onClick","alert","addTaskFunc","class","TaskCount","count","Task","text","dueDate","completed","markCompleteFunc","deleteTaskFunc","App","uuidv4","tasks","setTasks","deleteTask","filteredTasks","filter","task","markTaskComplete","newTasks","map","newTask","length","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cc80f54b.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n    return(\n        <h1>toDo</h1>\n    )\n}\n\nexport default Header;","import React, { useState } from \"react\";\nimport moment from \"moment\";\n\n//  Any component can keep track of its own state, so long as parent componnents don't need \n// to know about this state \n\n// This component is now a controlled component (a controlled form)\n\n\nfunction AddTask(props) {\n    // Create some initial state for the form\n    const [taskText, setTaskText] = useState(\"\");\n    //const [date, setDate] = useState(\"2020-03-29\"); // TODO: use moment to set the initial date to 1 week from now\n    const [date, setDate] = useState(moment().format('ddd Do MMMM YYYY'));\n\n    const handleTextChange = (event) => {\n        setTaskText(event.target.value);\n    }\n\n    const handleDateChange = (event) => {\n        setDate(event.target.value);\n    }\n\n    const handleAddTask = () => {\n        if (taskText === \"\") {\n            alert(\"Add a new task\")\n        } else if (date === \"\") {\n            alert(\"Date required\")\n        } else {\n            props.addTaskFunc(taskText, date);\n            setTaskText(\"\")\n            setDate(moment().format('ddd Do MMMM YYYY'))\n        }\n    }\n\n\n    // Make sure we can listen to any events that happen in the form, update state accordingly\n    return (\n        <div className=\"row addTask\">\n            <div className=\"col-md-4\">\n                <input type=\"text\" className=\"input-group\" id=\"addTask\" placeholder=\"Add new task\" value={taskText} onChange={handleTextChange} />\n            </div>\n\n            <div className=\"col-md-4\">\n                <input type=\"date\" className=\"input-group\" value={date} onChange={handleDateChange} />\n            </div>\n\n\n            <div className=\"col-md-4\">\n                <button className=\"btn\" onClick={handleAddTask}><i class=\"fas fa-plus-circle\"></i></button>\n            </div>\n        </div>\n    )\n}\n\nexport default AddTask;","import React from \"react\";\n\nfunction TaskCount(props) {\n    // { count: 0 }\n    return(\n        <div className=\"row m-3\">\n            <div className=\"col-12\">\n                <p className=\"taskCount\">{props.count} incomplete tasks</p>\n            </div>\n        </div>\n    )\n}\n\nexport default TaskCount;","import React from \"react\";\nimport moment from \"moment\";\n\nconst Task = props => {\n    /*  props = { \n        text: \"Do the dishes\",\n        dueDate: \"2020-03-10\", \n        completed: true, \n        id: 2, \n        deleteTaskFunc: fn(), \n        markCompleteFunc: fn() \n    }\n    */\n\n    const handleDeleteClick = () => {\n        props.deleteTaskFunc(props.id);\n    };\n\n    const handleCompleteClick = () => {\n        props.markCompleteFunc(props.id);\n    };\n\n    return (\n        <div className=\"row taskRow\">\n            <div className=\"col-md-6\">\n                <p className=\"task\">{props.text}</p>\n            </div>\n\n            <div className=\"col-md-2\">\n                <p className=\"dueDate\">{moment(props.dueDate).format('ddd Do MMMM YYYY')}</p>\n            </div>\n\n            <div className=\"col-md-2\">\n                {props.completed === false && (\n                    <button className=\"btn\" onClick={handleCompleteClick}><i class=\"fas fa-check-circle\"></i></button>)}\n            </div>\n\n            <div className=\"col-md-2\">\n                <button className=\"btn\" onClick={handleDeleteClick}><i class=\"fas fa-trash-alt\"></i></button>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Task;","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css';\nimport Header from \"./Header/Header\";\nimport AddTask from \"./AddTask/AddTask\";\nimport TaskCount from \"./TaskCount/TaskCount\";\nimport Task from \"./Task/Task\";\n\n// Click on the delete button\n// Our application needs to know this happened! (Listen for the event) \n// Know which button was clicked? \n// Remove the relevant todo object from our state \n\n// Click on the complete button\n// our application needs to know this happens\n// which button was clicked? (ID)\n// Updates the relevant task in our state (completed = true)\n\n// Adding a new task\n// Ensure the AddTask component is controlled - so that it knows about what is being entered in the form\n// Click on the add button\n// Need to know that this happened \n// What is the state of the form when this click happens? - DONE\n// Add the new task (constructed based on the data in the form) to the tasks list\n\n//JSX\nfunction App() {\n  // If a value can be computed from one piece of state, no need to store it separately (count in this case)\n  const [tasks, setTasks] = useState([\n    {\n      text: \"Clean the dishes\",\n      completed: true,\n      dueDate: \"2020-04-02\",\n      id: uuidv4()\n    },\n    {\n      text: \"Wash the dog\",\n      completed: false,\n      dueDate: \"2020-04-03\",\n      id: uuidv4()\n    },\n    {\n      text: \"Hoover the cupboard\",\n      completed: true,\n      dueDate: \"2020-04-04\",\n      id: uuidv4()\n    },\n    {\n      text: \"Hoover the car\",\n      completed: false,\n      dueDate: \"2020-04-05\",\n      id: uuidv4()\n    }\n  ])\n\n  // A function to delete a task from array, and update the state with the new, shorter array\n  //Any function that updates state should live where the state lives\n  const deleteTask = (id) => {\n    // delete /remove the task with the id from the tasks array\n\n    const filteredTasks = tasks.filter((task) => {\n      return task.id !== id;\n    });\n\n    // Update the state with the new (shorter) array\n    setTasks(filteredTasks);\n  };\n\n  const markTaskComplete = (id) => {\n    // Create a new array of updated tasks, where the completed property of the matching task has been updated\n    const newTasks = tasks.map(task => {\n      if (task.id === id) {\n        task.completed = true;\n      }\n\n      return task;\n    });\n\n    setTasks(newTasks);\n  }\n\n  const addTask = (text, date) => {\n    // Create a new task object based on the data passed as parameters\n    const newTask = {\n      text: text,\n      completed: false,\n      dueDate: date,\n      id: uuidv4() // TODO: UUID - use the UUID package from npm to generate a unique UUID \n    }\n    // Create a new array of tasks which includes this new task\n    // AVOID mutating arrays or object (push, pop, shift, splice, sort)\n    const newTasks = [...tasks, newTask];\n\n    // use the setTasks function to update the state\n    setTasks(newTasks);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"background\">\n        <Header />\n        <main>\n          <div className=\"container\">\n            <AddTask addTaskFunc={addTask} />\n            <TaskCount count={tasks.length} />\n            {/* Passing a prop of text to each Task component */}\n            {tasks.map((task) => {\n              return (\n                <Task\n                  // An internal prop used by React to keep track of which Task component is which \n                  key={task.id}\n                  deleteTaskFunc={deleteTask}\n                  markCompleteFunc={markTaskComplete}\n                  text={task.text}\n                  completed={task.completed}\n                  dueDate={task.dueDate}\n                  id={task.id}\n                />\n              );\n            })}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}