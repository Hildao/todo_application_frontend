{"version":3,"sources":["Header/Header.js","AddTask/AddTask.js","TaskCount/TaskCount.js","Task/Task.js","App.js","index.js"],"names":["Header","AddTask","props","useState","taskText","setTaskText","moment","format","date","setDate","className","type","id","placeholder","value","onChange","event","target","onClick","alert","addTaskFunc","TaskCount","count","Task","text","dueDate","completed","markCompleteFunc","deleteTaskFunc","App","tasks","setTasks","useEffect","axios","get","then","response","console","log","data","catch","err","deleteTask","delete","filteredTasks","filter","task","TaskId","markTaskComplete","put","Completed","newTasks","map","post","Description","DueDate","newTask","length","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32361862.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n    return(\n        <h1>toDo</h1>\n    )\n}\n\nexport default Header;","import React, { useState } from \"react\";\nimport moment from \"moment\";\n\n//  Any component can keep track of its own state, so long as parent componnents don't need \n// to know about this state \n\n// This component is now a controlled component (a controlled form)\n\n\nfunction AddTask(props) {\n    // Create some initial state for the form\n    const [taskText, setTaskText] = useState(\"\");\n    //const [date, setDate] = useState(\"2020-03-29\"); // TODO: use moment to set the initial date to 1 week from now\n    const [date, setDate] = useState(moment().format('ddd Do MMMM YYYY'));\n\n    const handleTextChange = (event) => {\n        setTaskText(event.target.value);\n    }\n\n    const handleDateChange = (event) => {\n        setDate(event.target.value);\n    }\n\n    const handleAddTask = () => {\n        if (taskText === \"\") {\n            alert(\"Add a new task\")\n        } else if (date === \"\") {\n            alert(\"Date required\")\n        } else {\n            props.addTaskFunc(taskText, date);\n            setTaskText(\"\")\n            setDate(moment().format('ddd Do MMMM YYYY'))\n        }\n    }\n\n\n    // Make sure we can listen to any events that happen in the form, update state accordingly\n    return (\n        <div className=\"row addTask\">\n            <div className=\"col-md-4\">\n                <input type=\"text\" className=\"input-group\" id=\"addTask\" placeholder=\"Add new task\" value={taskText} onChange={handleTextChange} />\n            </div>\n\n            <div className=\"col-md-4\">\n                <input type=\"date\" className=\"input-group\" value={date} onChange={handleDateChange} />\n            </div>\n\n\n            <div className=\"col-md-4\">\n                <button className=\"btn\" onClick={handleAddTask}><i className=\"fas fa-plus-circle\"></i></button>\n            </div>\n        </div>\n    )\n}\n\nexport default AddTask;","import React from \"react\";\n\nfunction TaskCount(props) {\n    // { count: 0 }\n    return(\n        <div className=\"row m-3\">\n            <div className=\"col-12\">\n                <p className=\"taskCount\">{props.count} incomplete tasks</p>\n            </div>\n        </div>\n    )\n}\n\nexport default TaskCount;","import React from \"react\";\nimport moment from \"moment\";\n\nconst Task = props => {\n    /*  props = { \n        text: \"Do the dishes\",\n        dueDate: \"2020-03-10\", \n        completed: true, \n        id: 2, \n        deleteTaskFunc: fn(), \n        markCompleteFunc: fn() \n    }\n    */\n\n    const handleDeleteClick = () => {\n        props.deleteTaskFunc(props.id);\n    };\n\n    const handleCompleteClick = () => {\n        props.markCompleteFunc(props.id);\n    };\n\n    return (\n        <div className=\"row taskRow\">\n            <div className=\"col-md-6\">\n                <p className=\"task\">{props.text}</p>\n            </div>\n\n            <div className=\"col-md-2\">\n                <p className=\"dueDate\">{moment(props.dueDate).format('ddd Do MMMM YYYY')}</p>\n            </div>\n\n            <div className=\"col-md-2\">\n                {props.completed === 0 && (\n                    <button className=\"btn\" onClick={handleCompleteClick}><i className=\"fas fa-check-circle\"></i></button>)}\n            </div>\n\n            <div className=\"col-md-2\">\n                <button className=\"btn\" onClick={handleDeleteClick}><i className=\"fas fa-trash-alt\"></i></button>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Task;","import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\n//import { v4 as uuidv4 } from 'uuid';\nimport './App.css';\nimport Header from \"./Header/Header\";\nimport AddTask from \"./AddTask/AddTask\";\nimport TaskCount from \"./TaskCount/TaskCount\";\nimport Task from \"./Task/Task\";\n\n// Click on the delete button\n  // Our application needs to know this happened! (Listen for the event) \n  // Know which button was clicked? \n  // Remove the relevant todo object from our state \n\n// Click on the complete button\n  // our application needs to know this happens\n  // which button was clicked? (ID)\n  // Updates the relevant task in our state (completed = true)\n\n// Adding a new task\n  // Ensure the AddTask component is controlled - so that it knows about what is being entered in the form\n  // Click on the add button\n  // Need to know that this happened \n  // What is the state of the form when this click happens? - DONE\n  // Add the new task (constructed based on the data in the form) to the tasks list\n\n//JSX\nfunction App() {\n  // If a value can be computed from one piece of state, no need to store it separately (count in this case)\n  const [tasks, setTasks] = useState([]);\n\n  //useEffect(() => {\n  //console.log(\"tasks changes!\")\n  //}, [tasks]);\n\n  // Only run this code once, when the component first mounts\n  useEffect(() => {\n    // Fetch tasks from Backend (GET)\n    axios.get(\"https://6aanbpmsk6.execute-api.eu-west-1.amazonaws.com/dev/tasks\")\n      .then(response => {\n        console.log(\"Success\", response.data);\n        setTasks(response.data);\n      })\n      .catch(err => {\n        console.log(\"Error\", err);\n      });\n    // the array would normally contain values that may change, and React would run the above code WHEN that value changes\n    // \"Array of dependencies\"\n  }, []);\n\n\n  // A function to delete a task from array, and update the state with the new, shorter array\n  //Any function that updates state should live where the state lives\n  const deleteTask = id => {\n    // Issue a DELETE request to my API via Postman\n    // If resolves, THEN I will filter my tasks on the frontend to remove the task with the given ID\n    // If rejects, I'm not gonna filter\n    axios.delete(`https://6aanbpmsk6.execute-api.eu-west-1.amazonaws.com/dev/tasks/${id}`)\n      .then(response => {\n        const filteredTasks = tasks.filter((task) => {\n          return task.TaskId !== id;\n        });\n\n        // Update the state with the new (shorter) array\n        setTasks(filteredTasks);\n      })\n      .catch(err => {\n        console.log('API Error', err);\n      });\n  };\n\n  const markTaskComplete = (id) => {\n\n    axios\n      .put(\n        `https://6aanbpmsk6.execute-api.eu-west-1.amazonaws.com/dev/tasks/${id}`, {\n        Completed: true\n      }\n      )\n      .then((response) => {\n        // Create a new array of updated tasks, where the completed property of the matching task has been updated\n        const newTasks = tasks.map((task) => {\n          if (task.TaskId === id) {\n            task.Completed = 1;\n          }\n          return task;\n        });\n\n        setTasks(newTasks);\n      })\n      .catch(err => {\n        console.log(\"Error updating Task\", err);\n      });\n  }\n\n  const addTask = (text, date) => {\n    // Create a new task object based on the data passed as parameters\n\n    axios.post(\"https://6aanbpmsk6.execute-api.eu-west-1.amazonaws.com/dev/tasks\", {\n      Description: text,\n      DueDate: date,\n    })\n      .then(response => {\n        const newTask = response.data;\n        // Create a new array of tasks which includes this new task\n        // AVOID mutating arrays or object (push, pop, shift, splice, sort)\n        const newTasks = [...tasks, newTask];\n\n        // use the setTasks function to update the state\n        setTasks(newTasks);\n      })\n      .catch(err => {\n        console.log(\"Error creating task\", err);\n      });\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"background\">\n        <Header />\n        <main>\n          <div className=\"container\">\n            <AddTask addTaskFunc={addTask} />\n            <TaskCount count={tasks.length} />\n            {/* Passing a prop of text to each Task component */}\n            {tasks.map((task) => {\n              return (\n                <Task\n                  // An internal prop used by React to keep track of which Task component is which \n                  key={task.TaskId}\n                  deleteTaskFunc={deleteTask}\n                  markCompleteFunc={markTaskComplete}\n                  text={task.Description}\n                  completed={task.Completed}\n                  dueDate={task.DueDate}\n                  id={task.TaskId}\n                />\n              );\n            })}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}